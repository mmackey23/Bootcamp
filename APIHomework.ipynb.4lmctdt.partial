{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import openweathermapy\n",
    "from citipy import citipy\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import random\n",
    "import numpy as np\n",
    "import requests\n",
    "from config import api_key\n",
    "from collections import defaultdict\n",
    "import json\n",
    "from matplotlib import style\n",
    "style.use('seaborn-bright')\n",
    "import time\n",
    "import datetime"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "City Location Complete\n"
     ]
    }
   ],
   "source": [
    "\n",
    "max_latitude = 90\n",
    "min_latitude = -90\n",
    "max_longitude = 180\n",
    "min_longitude = -180\n",
    "\n",
    "cities = []\n",
    "\n",
    "for latitude in np.linspace(min_latitude, max_latitude, num=360, endpoint=True):\n",
    "    for _ in range(1, 21):\n",
    "        lng = random.uniform(min_longitude, max_longitude)\n",
    "        lat = random.uniform(latitude, latitude + 1)\n",
    "        city = citipy.nearest_city(lat, lng)\n",
    "        city_data = f'{city.city_name},{city.country_code}'\n",
    "        if city_data not in cities:\n",
    "            cities.append(city_data)\n",
    "\n",
    "samples = np.array_split(cities, 34)\n",
    "\n",
    "print(\"City Location Complete\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "url = \"http://api.openweathermap.org/data/2.5/weather?\"\n",
    "units = \"imperial\"\n",
    "\n",
    "\n",
    "query_url = f\"{url}appid={api_key}&units={units}&q=\"\n",
    "\n",
    "\n",
    "city_data_dict = defaultdict(list)\n",
    "\n",
    "divider = f'*********************************'\n",
    "print(divider)\n",
    "print('* BEGINNING DATA RETRIEVAL..... *')\n",
    "print(divider)\n",
    "\n",
    "for index, target_cities in enumerate(samples):\n",
    "    for idx, target_city in enumerate(target_cities):\n",
    "        print(f'Processing Record {idx} of Set {index} | {target_city}')\n",
    "        response = requests.get(query_url + target_city)\n",
    "        response_data = response.json()\n",
    "\n",
    "        if response.status_code == 200:\n",
    "            print(f'Data found (status code: {response.status_code}) | {target_city}')\n",
    "            try:\n",
    "                city_data_dict['city_name'].append(response_data['name'])\n",
    "                city_data_dict['city_country_code'].append(response_data['sys']['country'])\n",
    "                city_data_dict['city_id'].append(response_data['id'])\n",
    "                city_data_dict['city_lat'].append(response_data['coord']['lat'])\n",
    "                city_data_dict['city_lng'].append(response_data['coord']['lon'])\n",
    "                city_data_dict['city_max_temp'].append(response_data['main']['temp_max'])\n",
    "                city_data_dict['city_humidity'].append(response_data['main']['humidity'])\n",
    "                city_data_dict['city_wind_speed'].append(response_data['wind']['speed'])\n",
    "                city_data_dict['city_cloud_cover'].append(response_data['clouds']['all'])\n",
    "                city_data_dict['record_dt'].append(response_data['dt'])\n",
    "                print(f'Data loaded successfully | {target_city}')\n",
    "                print(divider)\n",
    "            except KeyError:\n",
    "                print(f'We got a good response (status code: {response.status_code}), but did not receive good info. \\\n",
    "                | {target_city }')\n",
    "                print(f'API Response: ')\n",
    "                print(json.dumps(response_data))\n",
    "        else:\n",
    "            try:\n",
    "                print(f\"ERROR: Data retrieval unsuccessful for {target_city}. Code: {response_data['cod']} \\\n",
    "                      MSG: {response_data['message']}\")\n",
    "            except KeyError:\n",
    "                print(f'SEVERE ERROR: Data retrieval unsuccessful for {target_city}. Code: {response.status_code}')\n",
    "   \n",
    "    time.sleep(60)\n",
    "    \n",
    "print(divider)\n",
    "print(\"Data Complete\")      "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "city_data_df = pd.DataFrame(city_data_dict)\n",
    "\n",
    "\n",
    "record_date = datetime.datetime.fromtimestamp(int(city_data_df['record_dt'][0])).strftime('%m/%d/%y')\n",
    "\n",
    "\n",
    "city_data_display = city_data_df[['city_name', 'city_country_code', 'city_id', 'city_lat', 'city_lng',\n",
    "                                 'city_max_temp', 'city_humidity', 'city_cloud_cover', 'city_wind_speed',\n",
    "                                 'record_dt']].set_index('city_name')\n",
    "\n",
    "city_data_display.head()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(city_data_df[\"city_lat\"],\n",
    "            city_data_df[\"city_max_temp\"],\n",
    "            edgecolor=\"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"City\")\n",
    "\n",
    "chart_title = f'City Latitude vs Max Temperature ({record_date})'\n",
    "plt.title(chart_title)\n",
    "plt.ylabel(\"Temperature (Fahrenheit)\")\n",
    "plt.xlabel(\"Latitude (Degrees)\")\n",
    "plt.grid(True)\n",
    "plt.xlim([-90, 90])\n",
    "plt.ylim([-20, 110])\n",
    "plt.savefig(\"output/lat_vs_max_temp.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(city_data_df[\"city_lat\"],\n",
    "            city_data_df[\"city_humidity\"],\n",
    "            edgecolor=\"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"City\")\n",
    "\n",
    "\n",
    "chart_title = f'City Latitude vs Max Humidity ({record_date})'\n",
    "plt.title(chart_title)\n",
    "plt.ylabel(\"Humidity (%)\")\n",
    "plt.xlabel(\"Latitude (Degrees)\")\n",
    "plt.grid(True)\n",
    "plt.xlim([-90, 90])\n",
    "plt.ylim([-10, 110])\n",
    "plt.savefig(\"output/lat_vs_max_humidity.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(city_data_df[\"city_lat\"],\n",
    "            city_data_df[\"city_cloud_cover\"],\n",
    "            edgecolor=\"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"City\")\n",
    "\n",
    "\n",
    "chart_title = f'City Latitude vs Cloud Cover ({record_date})'\n",
    "plt.title(chart_title)\n",
    "plt.ylabel(\"Cloud Cover (%)\")\n",
    "plt.xlabel(\"Latitude (Degrees)\")\n",
    "plt.grid(True)\n",
    "plt.xlim([-90, 90])\n",
    "plt.ylim([-10, 110])\n",
    "plt.savefig(\"output/lat_vs_cloud_cover.png\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.scatter(city_data_df[\"city_lat\"],\n",
    "            city_data_df[\"city_wind_speed\"],\n",
    "            edgecolor=\"black\", linewidths=1, marker=\"o\",\n",
    "            alpha=0.8, label=\"City\")\n",
    "\n",
    "\n",
    "chart_title = f'City Latitude vs Wind Speed ({record_date})'\n",
    "plt.title(chart_title)\n",
    "plt.ylabel(\"Wind Speed (MPH)\")\n",
    "plt.xlabel(\"Latitude (Degrees)\")\n",
    "plt.grid(True)\n",
    "plt.xlim([-90, 90])\n",
    "plt.ylim([0, 30])\n",
    "plt.savefig(\"output/lat_vs_wind_speed.png\")\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
